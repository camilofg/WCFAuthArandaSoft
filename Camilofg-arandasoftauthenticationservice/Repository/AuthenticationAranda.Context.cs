//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Repository
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ArandaAuthenticationEntities : DbContext
    {
        public ArandaAuthenticationEntities()
            : base("name=ArandaAuthenticationEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Access> Access { get; set; }
        public virtual DbSet<Role> Role { get; set; }
        public virtual DbSet<User> User { get; set; }
    
        public virtual ObjectResult<string> AssociateAccessXRole(string access, string role)
        {
            var accessParameter = access != null ?
                new ObjectParameter("Access", access) :
                new ObjectParameter("Access", typeof(string));
    
            var roleParameter = role != null ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("AssociateAccessXRole", accessParameter, roleParameter);
        }
    
        public virtual ObjectResult<GetAccessXRole_Result> GetAccessXRole(Nullable<int> roleFilter)
        {
            var roleFilterParameter = roleFilter.HasValue ?
                new ObjectParameter("RoleFilter", roleFilter) :
                new ObjectParameter("RoleFilter", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAccessXRole_Result>("GetAccessXRole", roleFilterParameter);
        }
    
        public virtual ObjectResult<UsersQuery_Result> UsersQuery(string filterAccess, string filterRol)
        {
            var filterAccessParameter = filterAccess != null ?
                new ObjectParameter("FilterAccess", filterAccess) :
                new ObjectParameter("FilterAccess", typeof(string));
    
            var filterRolParameter = filterRol != null ?
                new ObjectParameter("FilterRol", filterRol) :
                new ObjectParameter("FilterRol", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UsersQuery_Result>("UsersQuery", filterAccessParameter, filterRolParameter);
        }
    }
}
